{"version":3,"sources":["initFirebase.js","components/Input.js","App.js","reportWebVitals.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","Input","useState","text","setText","arr","setArr","firstTimeUserName","setFirstTimeUserName","name","setName","db","firestore","collection","doc","update","array","FieldValue","arrayUnion","slice","message","inputValue","Form","onSubmit","e","preventDefault","Group","className","controlId","Control","onChange","target","value","type","placeholder","Button","title","variant","onKeyPress","charCode","shiftKey","reset","as","rows","Display","state","stateEndRef","useRef","useEffect","current","scrollIntoView","behavior","Math","max","map","item","Date","toString","uniqid","ref","App","setState","loading","setLoading","onSnapshot","querySnapshot","items","forEach","push","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6409da2.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst config = {\n  apiKey: \"AIzaSyCCp-qwLGq9MugKd0g3rzLJBiL2bRW-tmY\",\n  authDomain: \"chat-app-11b84.firebaseapp.com\",\n  databaseURL:\n    \"https://chat-app-11b84-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"chat-app-11b84\",\n  storageBucket: \"chat-app-11b84.appspot.com\",\n  messagingSenderId: \"561002742526\",\n  appId: \"1:561002742526:web:1ea255108f7778f356dbaf\",\n  measurementId: \"G-T5Y24K7FG6\",\n};\n\nfunction initFirebase() {\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n  }\n}\ninitFirebase();\n\nexport { firebase };\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { firebase } from \"../initFirebase\";\n\n//the following are just examples /////////\n// import Button from \"react-bootstrap/Button\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\n// The added element component\n\nconst Input = () => {\n  //get the textarea input\n  const [text, setText] = useState(\"\");\n  const [arr, setArr] = useState([]);\n  const [firstTimeUserName, setFirstTimeUserName] = useState(null);\n  const [name, setName] = useState(null);\n\n  //create handlechange function\n  const handleChange = (e) => {\n    setText({\n      inputValue: e.target.value,\n      name: name,\n    });\n  };\n  //create handleSubmit function\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setArr([...arr, text]);\n    e.target.reset();\n  };\n\n  // //the following updates the firestore database\n  const db = firebase.firestore();\n  if (arr.length > 0) {\n    db.collection(\"texts\")\n      .doc(\"DwcucDim2waadle0CLOF\")\n      .update({\n        //this is how you add a new item to the array in firestore\n        array: firebase.firestore.FieldValue.arrayUnion({\n          //new object comes here\n          name: arr.slice(-1)[0].name,\n          message: arr.slice(-1)[0].inputValue,\n        }),\n      });\n  }\n\n  //get userName\n  const getUserName = (e) => {\n    setFirstTimeUserName(e.target.value);\n  };\n  //write username on submit\n  const writeUserName = (e) => {\n    e.preventDefault();\n    setName(firstTimeUserName);\n  };\n\n  const handleKeypress = (e) => {\n    //it triggers by pressing the enter key\n    //somehow, for the name submit, I don't need this\n    //also, the user can use shift + enter but it won't affect the outcome. Dunno how'd I do that tbh\n    if (e.charCode === 13 && !e.shiftKey) {\n      setArr([...arr, text]);\n      e.target.value = \"\";\n    }\n  };\n  //conditionnal rendering starts here\n  if (name === null) {\n    return (\n      <Form onSubmit={writeUserName}>\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n          <Form.Control\n            onChange={getUserName}\n            type=\"text\"\n            placeholder=\"write your user name to join chat\"\n          />\n        </Form.Group>\n        <Button title=\"getUserName\" variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  } else {\n    return (\n      <Form onKeyPress={handleKeypress} onSubmit={handleSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n          {/* <Form.Label>Write your message here</Form.Label> */}\n          <Form.Control\n            className=\"textArea\"\n            onChange={handleChange}\n            as=\"textarea\"\n            rows={3}\n          />\n        </Form.Group>\n        <Button title=\"messageForm\" variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n};\n\nexport default Input;\n","import { useState, useEffect, useRef } from \"react\";\nimport Input from \"./components/Input\";\nimport { firebase } from \"./initFirebase\";\nimport \"./style/style.css\";\nimport uniqid from \"uniqid\";\n\nconst Display = ({ state }) => {\n  const stateEndRef = useRef(null);\n  const scrollToBottom = () => {\n    stateEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [state]);\n\n  return (\n    <div>\n      {state[0].array\n        //show only last 50 items\n        .slice(Math.max(state[0].array.length - 50, 0))\n        .map((item) => (\n          <div key={uniqid()} className=\"messages\">\n            <div className=\"flexing\">\n              <p className=\"itemName\">{item.name}</p>\n              <p className=\"itemDate\">{new Date().toString()} </p>\n            </div>\n            <p className=\"itemMessage\">{item.message}</p>\n          </div>\n        ))}\n      <div ref={stateEndRef} />\n    </div>\n  );\n};\n\nfunction App() {\n  const ref = firebase.firestore().collection(\"texts\");\n  const [state, setState] = useState([\n    {\n      array: [{ name: \"\", message: \"\" }],\n    },\n  ]);\n  const [loading, setLoading] = useState(false);\n\n  function getInput() {\n    setLoading(true);\n    ref.onSnapshot((querySnapshot) => {\n      const items = [];\n      querySnapshot.forEach((doc) => {\n        items.push(doc.data());\n      });\n      setState(items);\n      setLoading(false);\n    });\n  }\n  useEffect(() => {\n    getInput();\n  }, []);\n\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"display\">\n        <Display state={state} />\n      </div>\n      <div className=\"inputField\">\n        <Input />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { firebase } from \"./initFirebase\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}